/**
 * This file was automatically generated by idl2ts
 * DO NOT EDIT THIS FILE DIRECTLY
 * 
 * Source: comps.idl
 * Generated on: 2025-08-24T23:10:28.114Z
 * idl2ts version: 1.0.0
 */

import { CORBA } from 'corba.ts';

// Module: returncodes

export type returncodes_rc = number;

export const returncodes_RC_OK: number = 0;

export const returncodes_RC_REFERENCE: number = -1;

export const returncodes_RC_STATE: number = -2;

export const returncodes_RC_DENIED: number = -3;

export const returncodes_RC_PARAMETER: number = -4;

export const returncodes_RC_ANY_PARAMETER: number = -5;

export const returncodes_RC_LISTENER: number = -6;

export const returncodes_RC_SHARE: number = -7;

export const returncodes_RC_UNAUTHORIZED: number = -8;

export const returncodes_RC_ERROR: number = -9;

export const returncodes_RC_NOT_SUPPORTED: number = -10;

// Module: datastatus

export const datastatus_DS_OK: number = 0;

export const datastatus_DS_CORRUPTED: number = 1;

export const datastatus_DS_INCOMPLETE: number = 2;

export const datastatus_DS_ZEROLENGTH: number = 3;

export const datastatus_DS_DOCUMENT_AUTHENTICATION_FAILED: number = 4;

export const datastatus_DS_INVALID: number = 5;

export const datastatus_DS_MISMATCH: number = 6;

export const datastatus_DS_TYPES_FOID_ISO: number = 100;

export const datastatus_DS_TYPES_PAYMENT_ISO: number = 200;

export const datastatus_DS_TYPES_DISCRETIONARY_ISO: number = 300;

export const datastatus_DS_TYPES_FOID_JIS2: number = 14100;

export const datastatus_DS_TYPES_PAYMENT_JIS2: number = 14200;

export const datastatus_DS_TYPES_DISCRETIONARY_JIS2: number = 14300;

export const datastatus_DS_TYPES_ISO: number = 0;

export const datastatus_DS_TYPES_VING: number = 1000;

export const datastatus_DS_TYPES_TESSA: number = 2000;

export const datastatus_DS_TYPES_SAFLOK: number = 3000;

export const datastatus_DS_TYPES_TIMELOX: number = 4000;

export const datastatus_DS_TYPES_KABA_ILCO: number = 5000;

export const datastatus_DS_TYPES_KABA_ILCO_FOLIO: number = 6000;

export const datastatus_DS_TYPES_IMAGE_IR: number = 7000;

export const datastatus_DS_TYPES_IMAGE_VIS: number = 8000;

export const datastatus_DS_TYPES_IMAGE_UV: number = 9000;

export const datastatus_DS_TYPES_IMAGE_PHOTO: number = 10000;

export const datastatus_DS_TYPES_IMAGE_COAX: number = 11000;

export const datastatus_DS_TYPES_CODELINE: number = 12000;

export const datastatus_DS_TYPES_BARCODE: number = 13000;

export const datastatus_DS_TYPES_MIWA: number = 14000;

export const datastatus_DS_TYPES_JIS2: number = 14000;

export const datastatus_DS_TYPES_SCAN_PDF417: number = 15000;

export const datastatus_DS_TYPES_SCAN_AZTEC: number = 15100;

export const datastatus_DS_TYPES_SCAN_DMATRIX: number = 15200;

export const datastatus_DS_TYPES_SCAN_QR: number = 15300;

export const datastatus_DS_TYPES_SCAN_CODE39: number = 15400;

export const datastatus_DS_TYPES_SCAN_CODE128: number = 15500;

export const datastatus_DS_TYPES_SCAN_CODE2OF5: number = 15600;

export const datastatus_DS_TYPES_ISO7816: number = 16000;

export const datastatus_DS_TYPES_PRINT_2S_PAGE: number = 16100;

export const datastatus_DS_TYPES_PRINT_2S_MULTI: number = 16200;

export const datastatus_DS_TYPES_PRINT_PDF: number = 16300;

export const datastatus_DS_TYPES_MIFARE: number = 17000;

export const datastatus_DS_TYPES_SUICA: number = 17010;

export const datastatus_DS_TYPES_ISO15961: number = 18000;

export const datastatus_DS_TYPES_RP1745: number = 18010;

export const datastatus_DS_TYPES_WEIGHT: number = 18020;

export const datastatus_DS_TYPES_HEAVYTAG: number = 18030;

export const datastatus_DS_TYPES_SBDAEA: number = 18040;

export const datastatus_DS_TYPES_SBDCUSS: number = 18050;

export const datastatus_DS_TYPES_EPASSPORT_DG1: number = 20100;

export const datastatus_DS_TYPES_EPASSPORT_DG2: number = 20200;

export const datastatus_DS_TYPES_EPASSPORT_DG3: number = 20300;

export const datastatus_DS_TYPES_EPASSPORT_DG4: number = 20400;

export const datastatus_DS_TYPES_EPASSPORT_DG5: number = 20500;

export const datastatus_DS_TYPES_EPASSPORT_DG6: number = 20600;

export const datastatus_DS_TYPES_EPASSPORT_DG7: number = 20700;

export const datastatus_DS_TYPES_EPASSPORT_DG8: number = 20800;

export const datastatus_DS_TYPES_EPASSPORT_DG9: number = 20900;

export const datastatus_DS_TYPES_EPASSPORT_DG10: number = 21000;

export const datastatus_DS_TYPES_EPASSPORT_DG11: number = 21100;

export const datastatus_DS_TYPES_EPASSPORT_DG12: number = 21200;

export const datastatus_DS_TYPES_EPASSPORT_DG13: number = 21300;

export const datastatus_DS_TYPES_EPASSPORT_DG14: number = 21400;

export const datastatus_DS_TYPES_EPASSPORT_DG15: number = 21500;

export const datastatus_DS_TYPES_EPASSPORT_DG16: number = 21600;

export const datastatus_DS_TYPES_EPASSPORT_DG17: number = 21700;

export const datastatus_DS_TYPES_EPASSPORT_DG18: number = 21800;

export const datastatus_DS_TYPES_EPASSPORT_DG19: number = 21900;

export const datastatus_DS_TYPES_EPASSPORT_DG20: number = 22000;

export const datastatus_DS_TYPES_EPAYMENT: number = 23000;

export const datastatus_DS_TYPES_ILLUMINATION: number = 24000;

export const datastatus_DS_TYPES_SSML10: number = 25000;

export const datastatus_DS_TYPES_SSML11: number = 25011;

export const datastatus_DS_TYPES_KEY: number = 26000;

export const datastatus_DS_TYPES_KEY_UP: number = 26010;

export const datastatus_DS_TYPES_KEY_DOWN: number = 26020;

// Module: eventcodes

export const eventcodes_EC_OK: number = 0;

export const eventcodes_EVENTHANDLING_READY: number = 1;

export const eventcodes_UNAVAILABLE_RELEASED_PLATFORM: number = 2;

export const eventcodes_EVENTHANDLING_UNAVAILABLE: number = 3;

export const eventcodes_UNAVAILABLE_RELEASED_APPLICATION: number = 4;

export const eventcodes_READY_RELEASED_APPLICATION: number = 5;

export const eventcodes_READY_RELEASED_PLATFORM: number = 6;

export const eventcodes_RELEASED_READY: number = 7;

export const eventcodes_RELEASED_UNAVAILABLE: number = 8;

export const eventcodes_INITIALIZE_DISABLED: number = 101;

export const eventcodes_AVAILABLE_DISABLED: number = 102;

export const eventcodes_ACTIVE_DISABLED: number = 103;

export const eventcodes_UNAVAILABLE_AVAILABLE: number = 104;

export const eventcodes_AVAILABLE_ACTIVE: number = 105;

export const eventcodes_ACTIVE_AVAILABLE: number = 106;

export const eventcodes_INITIALIZE_STOPPED_STOP: number = 107;

export const eventcodes_AVAILABLE_STOPPED_STOP: number = 108;

export const eventcodes_ACTIVE_STOPPED_STOP: number = 109;

export const eventcodes_SUSPENDED_STOPPED_STOP: number = 110;

export const eventcodes_DISABLED_STOPPED_STOP: number = 111;

export const eventcodes_SUSPENDED_AVAILABLE: number = 112;

export const eventcodes_AVAILABLE_SUSPENDED: number = 113;

export const eventcodes_INITIALIZE_STOPPED_RESTART: number = 114;

export const eventcodes_AVAILABLE_STOPPED_RESTART: number = 115;

export const eventcodes_ACTIVE_STOPPED_RESTART: number = 116;

export const eventcodes_DISABLED_STOPPED_RESTART: number = 117;

export const eventcodes_SUSPENDED_STOPPED_RESTART: number = 118;

export const eventcodes_STOPPED_INITIALIZE: number = 119;

export const eventcodes_DISABLED_INITIALIZE: number = 120;

export const eventcodes_UNAVAILABLE_STOPPED_RESTART: number = 121;

export const eventcodes_UNAVAILABLE_DISABLED: number = 122;

export const eventcodes_UNAVAILABLE_SUSPENDED: number = 123;

export const eventcodes_INITIALIZE_SUSPENDED: number = 124;

export const eventcodes_SUSPENDED_DISABLED: number = 125;

export const eventcodes_SUSPENDED_INITIALIZE: number = 126;

export const eventcodes_SUSPENDED_UNAVAILABLE: number = 127;

export const eventcodes_UNAVAILABLE_STOPPED_STOP: number = 128;

export const eventcodes_INITIALIZE_UNAVAILABLE: number = 129;

export const eventcodes_AVAILABLE_UNAVAILABLE: number = 130;

export const eventcodes_DISABLED_SUSPENDED: number = 131;

export const eventcodes_RELEASED: number = 201;

export const eventcodes_UNAVAILABLE: number = 202;

export const eventcodes_READY: number = 203;

export const eventcodes_STOPPED: number = 204;

export const eventcodes_SUSPENDED: number = 205;

export const eventcodes_DISABLED: number = 206;

export const eventcodes_INITIALIZE: number = 207;

export const eventcodes_AVAILABLE: number = 208;

export const eventcodes_ACTIVE: number = 209;

export const eventcodes_BUSY: number = 210;

export const eventcodes_ACTIVE_ACTIVE: number = 132;

export const eventcodes_STATE_EXPLANATION: number = 1000;

export const eventcodes_ACTIVE_TRANSFER: number = 1001;

export const eventcodes_TRANSACTION_EXPLANATION: number = 1002;

export const eventcodes_VERSION_EXPLANATION: number = 1003;

export const eventcodes_ACTIVE_UNAVAILABLE: number = 133;

export const eventcodes_UPDATE_REQUEST: number = 1004;

export const eventcodes_ACTIVE_ACCESSIBLE: number = 134;

export const eventcodes_ACCESSIBLE_ACTIVE: number = 135;

export const eventcodes_ACCESSIBLE: number = 211;

export const eventcodes_CL_DATA_PRESENT: number = 136;

// Module: statuscodes

export const statuscodes_OK: number = 0;

export const statuscodes_TIMEOUT: number = 1;

export const statuscodes_WRONG_STATE: number = 2;

export const statuscodes_CANCELLED: number = 3;

export const statuscodes_SOFTWARE_ERROR: number = 4;

export const statuscodes_ALMOST_OUT_OF_TIME: number = 5;

export const statuscodes_OUT_OF_SEQUENCE: number = 6;

export const statuscodes_MEDIA_JAMMED: number = 101;

export const statuscodes_MEDIA_MISPLACED: number = 102;

export const statuscodes_MEDIA_PRESENT: number = 103;

export const statuscodes_MEDIA_ABSENT: number = 104;

export const statuscodes_MEDIA_HIGH: number = 105;

export const statuscodes_MEDIA_FULL: number = 106;

export const statuscodes_MEDIA_LOW: number = 107;

export const statuscodes_MEDIA_EMPTY: number = 108;

export const statuscodes_MEDIA_DAMAGED: number = 109;

export const statuscodes_MEDIA_INCOMPLETELY_INSERTED: number = 110;

export const statuscodes_BAGGAGE_FULL: number = 120;

export const statuscodes_BAGGAGE_UNDETECTED: number = 121;

export const statuscodes_BAGGAGE_PRESENT: number = 122;

export const statuscodes_BAGGAGE_ABSENT: number = 123;

export const statuscodes_BAGGAGE_OVERSIZED: number = 124;

export const statuscodes_BAGGAGE_ILLICIT_WEIGHT_CHANGE: number = 125;

export const statuscodes_BAGGAGE_READY_FOR_TAKE_IN: number = 126;

export const statuscodes_BAGGAGE_TOO_MANY_BAGS: number = 127;

export const statuscodes_BAGGAGE_DELIVER: number = 128;

export const statuscodes_BAGGAGE_UNEXPECTED_BAG: number = 129;

export const statuscodes_BAGGAGE_TOO_HIGH: number = 130;

export const statuscodes_BAGGAGE_TOO_LONG: number = 131;

export const statuscodes_BAGGAGE_TOO_FLAT: number = 132;

export const statuscodes_BAGGAGE_TOO_SHORT: number = 133;

export const statuscodes_BAGGAGE_PARKED: number = 134;

export const statuscodes_BAGGAGE_INVALID_DATA: number = 135;

export const statuscodes_BAGGAGE_TRANSPORT_FAILED: number = 136;

export const statuscodes_BAGGAGE_WEIGHT_OUT_OF_RANGE: number = 137;

export const statuscodes_BAGGAGE_JAMMED: number = 138;

export const statuscodes_BAGGAGE_EMERGENCY_STOP: number = 139;

export const statuscodes_BAGGAGE_RESTLESS: number = 140;

export const statuscodes_BAGGAGE_TRANSPORT_BUSY: number = 144;

export const statuscodes_BAGGAGE_MISTRACKED: number = 145;

export const statuscodes_BAGGAGE_UNEXPECTED_CHANGE: number = 146;

export const statuscodes_BAGGAGE_ACCEPTED: number = 147;

export const statuscodes_BAGGAGE_DELIVERED: number = 148;

export const statuscodes_BAGGAGE_INTERFERENCE_USER: number = 149;

export const statuscodes_BAGGAGE_INTRUSION_SAFETY: number = 150;

export const statuscodes_BAGGAGE_NOT_CONVEYABLE: number = 151;

export const statuscodes_FORMAT_ERROR: number = 201;

export const statuscodes_LENGTH_ERROR: number = 202;

export const statuscodes_DATA_MISSING: number = 203;

export const statuscodes_PHYSICAL_ERROR: number = 204;

export const statuscodes_DATA_PRESENT: number = 205;

export const statuscodes_CONSUMABLES: number = 301;

export const statuscodes_HARDWARE_ERROR: number = 302;

export const statuscodes_CRITICAL_SOFTWARE_ERROR: number = 303;

export const statuscodes_NOT_REACHABLE: number = 304;

export const statuscodes_NOT_RESPONDING: number = 305;

export const statuscodes_THRESHOLD_ERROR: number = 306;

export const statuscodes_THRESHOLD_USAGE: number = 307;

export const statuscodes_CONFIGURATION_ERROR: number = 308;

export const statuscodes_SESSION_TIMEOUT: number = 309;

export const statuscodes_KILL_TIMEOUT: number = 310;

export const statuscodes_CUSS_MANAGER_REQUEST: number = 801;

export const statuscodes_SP_SYSTEM_MANAGER_REQUEST: number = 802;

export const statuscodes_AL_SYSTEM_MANAGER_REQUEST: number = 803;

export const statuscodes_CL_APPLICATION_REQUEST: number = 804;

export const statuscodes_AL_APPLICATION_REQUEST: number = 805;

export const statuscodes_APPLICATION_TECHNICAL_FIRST: number = 400;

export const statuscodes_APPLICATION_TECHNICAL_LAST: number = 499;

export const statuscodes_APPLICATION_SECURITY_FIRST: number = 500;

export const statuscodes_APPLICATION_SECURITY_LAST: number = 599;

export const statuscodes_APPLICATION_BUSINESS_FIRST: number = 900;

export const statuscodes_APPLICATION_BUSINESS_LAST: number = 999;

// Module: types

export type types_name = string;

export type types_namelist = types_name[];

export type types_indexList = number[];

export type types_reference = string;

export type types_ior = string;

export type types_iorlist = types_ior[];

export type types_bytestream = number[];

export type types_correlation = any;

export type types_timeout = number;

export const types_BLOCK_: types_timeout = 0;

export interface types_akID {
  companyCode: types_name;
  applicationName: types_name;
  vendorCode: types_name;
  kioskName: types_name;
}

export interface types_location {
  airportCode: types_name;
  terminal: types_name;
  area: types_name;
  address: types_name;
}

export enum types_orientation {
  north_ = 0,
  south_ = 1,
  east_ = 2,
  west_ = 3,
  undefined_ = 4
}

export interface types_coordinate {
  direction: types_orientation;
  degrees: number;
  minutes: number;
  seconds: number;
  hundreths: number;
}

export interface types_gps {
  longitude: types_coordinate;
  latitude: types_coordinate;
  altitude: number;
}

export interface types_EnvironmentLevel {
  sessionTimeout: types_timeout;
  killTimeout: types_timeout;
  kioskID: types_akID;
  kioskLocation: types_location;
  gpsLocation: types_gps;
  cussVersion: types_name;
  cussInterfaceVersionMin: types_name;
  cussInterfaceVersionMax: types_name;
  jvmName: types_name;
  jvmVersion: types_name;
  browserName: types_name;
  browserVersion: types_name;
  osName: types_name;
  osVersion: types_name;
  applicationToken: types_reference;
}

export interface types_EnvironmentComponent {
  virtualComponentName: types_name;
  virtualComponentRef: types_ior;
  realComponentName: types_name;
  linkedComponents: types_indexList;
}

export type types_EnvironmentComponents = types_EnvironmentComponent[];

export type types_dataStatus = number;

export interface types_dataRecord {
  status: types_dataStatus;
  message: types_bytestream;
}

export interface types_msgDataType {
  records: types_dataRecord[];
}

export type types_aeaDataType = types_bytestream;

export type types_svgDataType = types_bytestream;

export type types_nilDataType = number;

export enum types_action {
  subscribe_ = 0,
  discard_ = 1
}

export enum types_evtCategory {
  alarm_ = 0,
  alert_ = 1,
  normal_ = 2
}

export enum types_evtType {
  invalid_ = 0,
  private_ = 1,
  public_ = 2,
  platform_ = 3
}

export enum types_evtMode {
  solicited_ = 0,
  unsolicited_ = 1
}

export enum types_evtFilterType {
  all_ = 0,
  any_ = 1,
  nil_ = 2,
  code_ = 3,
  type_ = 4,
  component_ = 5
}

export type types_evtCode = number;

export type types_evtStatusCode = number;

export type types_datastream = any;

export type types_evtCodeFilterUnion = 
  { discriminator: "all_" | "any_"; filterALLorANY: any; } |
  { discriminator: "component_"; filterCOMPONENT: types_iorlist; }
;

export interface types_evtCodeFilterElem {
  eventCode: types_evtCode;
  statusCode: types_evtStatusCode;
  eventFilter: types_evtCodeFilterUnion;
}

export type types_evtCodeFilter = types_evtCodeFilterElem[];

export type types_evtTypeFilterUnion = 
  { discriminator: "all_" | "any_"; filterALLorANY: any; } |
  { discriminator: "component_"; filterCOMPONENT: types_iorlist; }
;

export interface types_evtTypeFilterElem {
  eventType: types_evtType;
  eventFilter: types_evtTypeFilterUnion;
}

export type types_evtTypeFilter = types_evtTypeFilterElem[];

export type types_evtComponentFilterUnion = 
  { discriminator: "all_" | "any_"; filterALLorANY: any; } |
  { discriminator: "code_"; filterCODE: types_evtCode[]; } |
  { discriminator: "type_"; filterTYPE: types_evtType[]; }
;

export interface types_evtComponentFilterElem {
  componentName: types_ior;
  eventFilter: types_evtComponentFilterUnion;
}

export type types_evtComponentFilter = types_evtComponentFilterElem[];

export type types_evtFilter = 
  { discriminator: "all_" | "any_"; filterALLorANY: any; } |
  { discriminator: "code_"; filterCODE: types_evtCodeFilter; } |
  { discriminator: "type_"; filterTYPE: types_evtTypeFilter; } |
  { discriminator: "component_"; filterCOMPONENT: types_evtComponentFilter; }
;

export type types_evtAcquireFilter = 
  { discriminator: "all_" | "nil_"; filterALLorNIL: any; } |
  { discriminator: "code_"; filterCODE: types_evtCode[]; } |
  { discriminator: "type_"; filterTYPE: types_evtType[]; }
;

export interface types_evtDescr {
  eventCode: types_evtCode;
  statusCode: types_evtStatusCode;
  eventTypes: types_evtType[];
  eventDescription: types_name;
}

export interface types_evtDescrANY_CODE_TYPE {
  eventDescr: types_evtDescr;
  componentList: types_namelist;
}

export interface types_evtDescrCOMPONENT {
  componentName: types_name;
  eventDescr: types_evtDescr[];
}

export type types_evtDescription = 
  { discriminator: "any_" | "code_" | "type_"; eventDescrANY_CODE_TYPE: types_evtDescrANY_CODE_TYPE; } |
  { discriminator: "component_"; eventDescrCOMPONENT: types_evtDescrCOMPONENT; }
;

export type types_TimeT = number;

export interface types_Event {
  timeStamp: types_TimeT;
  kioskID: types_akID;
  kioskLocation: types_location;
  gpsLocation: types_gps;
  componentRef: types_name;
  functionName: types_name;
  eventCode: types_evtCode;
  eventMode: types_evtMode;
  eventType: types_evtType;
  eventCategory: types_evtCategory;
  statusCode: types_evtStatusCode;
  elud: types_correlation;
  eventData: types_datastream;
}

export interface types_evtListener extends CORBA.Object {
  callback(e: types_Event): Promise<void>;
}

export class types_evtListener_Stub implements types_evtListener {
  constructor(private objRef: CORBA.ObjectRef) {}

  async callback(e: types_Event): Promise<void> {
    const request = this.objRef.create_request('callback');
    request.add_in_arg('e', e);
    await request.invoke();
  }

}

// Module: Characteristics

export interface Characteristics_Manufacturer extends CORBA.Object {
  readonly realComponentIdentification: string;
  get_realComponentIdentification(): Promise<string>;
  readonly downloadableFirmware: boolean;
  get_downloadableFirmware(): Promise<boolean>;
  readonly firmwareVersion: string;
  get_firmwareVersion(): Promise<string>;
  readonly manufacturerName: string;
  get_manufacturerName(): Promise<string>;
  readonly modelNumber: string;
  get_modelNumber(): Promise<string>;
  readonly serialNumber: string;
  get_serialNumber(): Promise<string>;
}

export class Characteristics_Manufacturer_Stub implements Characteristics_Manufacturer {
  constructor(private objRef: CORBA.ObjectRef) {}

  async get_realComponentIdentification(): Promise<string> {
    const request = this.objRef.create_request('_get_realComponentIdentification');
    await request.invoke();
    return request.return_value();
  }

  get realComponentIdentification(): string {
    throw new Error('Direct property access not supported. Use get_realComponentIdentification() instead.');
  }

  async get_downloadableFirmware(): Promise<boolean> {
    const request = this.objRef.create_request('_get_downloadableFirmware');
    await request.invoke();
    return request.return_value();
  }

  get downloadableFirmware(): boolean {
    throw new Error('Direct property access not supported. Use get_downloadableFirmware() instead.');
  }

  async get_firmwareVersion(): Promise<string> {
    const request = this.objRef.create_request('_get_firmwareVersion');
    await request.invoke();
    return request.return_value();
  }

  get firmwareVersion(): string {
    throw new Error('Direct property access not supported. Use get_firmwareVersion() instead.');
  }

  async get_manufacturerName(): Promise<string> {
    const request = this.objRef.create_request('_get_manufacturerName');
    await request.invoke();
    return request.return_value();
  }

  get manufacturerName(): string {
    throw new Error('Direct property access not supported. Use get_manufacturerName() instead.');
  }

  async get_modelNumber(): Promise<string> {
    const request = this.objRef.create_request('_get_modelNumber');
    await request.invoke();
    return request.return_value();
  }

  get modelNumber(): string {
    throw new Error('Direct property access not supported. Use get_modelNumber() instead.');
  }

  async get_serialNumber(): Promise<string> {
    const request = this.objRef.create_request('_get_serialNumber');
    await request.invoke();
    return request.return_value();
  }

  get serialNumber(): string {
    throw new Error('Direct property access not supported. Use get_serialNumber() instead.');
  }

}

export interface Characteristics_MediaType extends CORBA.Object {
  readonly type: Characteristics_MediaTypeDef;
  get_type(): Promise<Characteristics_MediaTypeDef>;
}

export class Characteristics_MediaType_Stub implements Characteristics_MediaType {
  constructor(private objRef: CORBA.ObjectRef) {}

  async get_type(): Promise<Characteristics_MediaTypeDef> {
    const request = this.objRef.create_request('_get_type');
    await request.invoke();
    return request.return_value();
  }

  get type(): Characteristics_MediaTypeDef {
    throw new Error('Direct property access not supported. Use get_type() instead.');
  }

}

export type Characteristics_MediaTypeListDef = Characteristics_MediaType[];

export interface Characteristics_MediaTypeList extends CORBA.Object {
  readonly mtList: Characteristics_MediaTypeListDef;
  get_mtList(): Promise<Characteristics_MediaTypeListDef>;
}

export class Characteristics_MediaTypeList_Stub implements Characteristics_MediaTypeList {
  constructor(private objRef: CORBA.ObjectRef) {}

  async get_mtList(): Promise<Characteristics_MediaTypeListDef> {
    const request = this.objRef.create_request('_get_mtList');
    await request.invoke();
    return request.return_value();
  }

  get mtList(): Characteristics_MediaTypeListDef {
    throw new Error('Direct property access not supported. Use get_mtList() instead.');
  }

}

export interface Characteristics_Location extends CORBA.Object {
  readonly Map: string;
  get_Map(): Promise<string>;
  readonly mapType: Characteristics_ImageType;
  get_mapType(): Promise<Characteristics_ImageType>;
  readonly howTo: string;
  get_howTo(): Promise<string>;
  readonly howToType: Characteristics_ImageType;
  get_howToType(): Promise<Characteristics_ImageType>;
  readonly componentLocation: Characteristics_LocationType;
  get_componentLocation(): Promise<Characteristics_LocationType>;
}

export class Characteristics_Location_Stub implements Characteristics_Location {
  constructor(private objRef: CORBA.ObjectRef) {}

  async get_Map(): Promise<string> {
    const request = this.objRef.create_request('_get_Map');
    await request.invoke();
    return request.return_value();
  }

  get Map(): string {
    throw new Error('Direct property access not supported. Use get_Map() instead.');
  }

  async get_mapType(): Promise<Characteristics_ImageType> {
    const request = this.objRef.create_request('_get_mapType');
    await request.invoke();
    return request.return_value();
  }

  get mapType(): Characteristics_ImageType {
    throw new Error('Direct property access not supported. Use get_mapType() instead.');
  }

  async get_howTo(): Promise<string> {
    const request = this.objRef.create_request('_get_howTo');
    await request.invoke();
    return request.return_value();
  }

  get howTo(): string {
    throw new Error('Direct property access not supported. Use get_howTo() instead.');
  }

  async get_howToType(): Promise<Characteristics_ImageType> {
    const request = this.objRef.create_request('_get_howToType');
    await request.invoke();
    return request.return_value();
  }

  get howToType(): Characteristics_ImageType {
    throw new Error('Direct property access not supported. Use get_howToType() instead.');
  }

  async get_componentLocation(): Promise<Characteristics_LocationType> {
    const request = this.objRef.create_request('_get_componentLocation');
    await request.invoke();
    return request.return_value();
  }

  get componentLocation(): Characteristics_LocationType {
    throw new Error('Direct property access not supported. Use get_componentLocation() instead.');
  }

}

export interface Characteristics_ComponentFonts extends CORBA.Object {
  readonly usedStandard: Characteristics_BarcodeStandard;
  get_usedStandard(): Promise<Characteristics_BarcodeStandard>;
  readonly Fonts: Characteristics_FontList;
  get_Fonts(): Promise<Characteristics_FontList>;
}

export class Characteristics_ComponentFonts_Stub implements Characteristics_ComponentFonts {
  constructor(private objRef: CORBA.ObjectRef) {}

  async get_usedStandard(): Promise<Characteristics_BarcodeStandard> {
    const request = this.objRef.create_request('_get_usedStandard');
    await request.invoke();
    return request.return_value();
  }

  get usedStandard(): Characteristics_BarcodeStandard {
    throw new Error('Direct property access not supported. Use get_usedStandard() instead.');
  }

  async get_Fonts(): Promise<Characteristics_FontList> {
    const request = this.objRef.create_request('_get_Fonts');
    await request.invoke();
    return request.return_value();
  }

  get Fonts(): Characteristics_FontList {
    throw new Error('Direct property access not supported. Use get_Fonts() instead.');
  }

}

export interface Characteristics_Bin extends CORBA.Object {
  readonly BinSize: number;
  get_BinSize(): Promise<number>;
  readonly AllmostFullLevel: number;
  get_AllmostFullLevel(): Promise<number>;
  readonly AllmostEmptyLevel: number;
  get_AllmostEmptyLevel(): Promise<number>;
  readonly currentNoOfDocuments: number;
  get_currentNoOfDocuments(): Promise<number>;
}

export class Characteristics_Bin_Stub implements Characteristics_Bin {
  constructor(private objRef: CORBA.ObjectRef) {}

  async get_BinSize(): Promise<number> {
    const request = this.objRef.create_request('_get_BinSize');
    await request.invoke();
    return request.return_value();
  }

  get BinSize(): number {
    throw new Error('Direct property access not supported. Use get_BinSize() instead.');
  }

  async get_AllmostFullLevel(): Promise<number> {
    const request = this.objRef.create_request('_get_AllmostFullLevel');
    await request.invoke();
    return request.return_value();
  }

  get AllmostFullLevel(): number {
    throw new Error('Direct property access not supported. Use get_AllmostFullLevel() instead.');
  }

  async get_AllmostEmptyLevel(): Promise<number> {
    const request = this.objRef.create_request('_get_AllmostEmptyLevel');
    await request.invoke();
    return request.return_value();
  }

  get AllmostEmptyLevel(): number {
    throw new Error('Direct property access not supported. Use get_AllmostEmptyLevel() instead.');
  }

  async get_currentNoOfDocuments(): Promise<number> {
    const request = this.objRef.create_request('_get_currentNoOfDocuments');
    await request.invoke();
    return request.return_value();
  }

  get currentNoOfDocuments(): number {
    throw new Error('Direct property access not supported. Use get_currentNoOfDocuments() instead.');
  }

}

export interface Characteristics_IOMode extends CORBA.Object {
  readonly mode: Characteristics_InputOutputMode;
  get_mode(): Promise<Characteristics_InputOutputMode>;
  setIOMode(appRef: types_reference, mode: Characteristics_InputOutputMode): Promise<returncodes_rc>;
}

export class Characteristics_IOMode_Stub implements Characteristics_IOMode {
  constructor(private objRef: CORBA.ObjectRef) {}

  async get_mode(): Promise<Characteristics_InputOutputMode> {
    const request = this.objRef.create_request('_get_mode');
    await request.invoke();
    return request.return_value();
  }

  get mode(): Characteristics_InputOutputMode {
    throw new Error('Direct property access not supported. Use get_mode() instead.');
  }

  async setIOMode(appRef: types_reference, mode: Characteristics_InputOutputMode): Promise<returncodes_rc> {
    const request = this.objRef.create_request('setIOMode');
    request.add_in_arg('appRef', appRef);
    request.add_in_arg('mode', mode);
    await request.invoke();
    return request.return_value();
  }

}

export interface Characteristics_Capture extends Characteristics_Bin, Characteristics_Manufacturer {
}

export class Characteristics_Capture_Stub implements Characteristics_Capture {
  constructor(private objRef: CORBA.ObjectRef) {}

}

export interface Characteristics_DataInput extends Characteristics_Manufacturer {
  readonly timeZone: number;
  get_timeZone(): Promise<number>;
}

export class Characteristics_DataInput_Stub implements Characteristics_DataInput {
  constructor(private objRef: CORBA.ObjectRef) {}

  async get_timeZone(): Promise<number> {
    const request = this.objRef.create_request('_get_timeZone');
    await request.invoke();
    return request.return_value();
  }

  get timeZone(): number {
    throw new Error('Direct property access not supported. Use get_timeZone() instead.');
  }

}

export interface Characteristics_DataOutput extends Characteristics_Manufacturer {
}

export class Characteristics_DataOutput_Stub implements Characteristics_DataOutput {
  constructor(private objRef: CORBA.ObjectRef) {}

}

export interface Characteristics_Dispenser extends Characteristics_Bin, Characteristics_Location, Characteristics_Manufacturer {
  readonly kind: Characteristics_DispenserType;
  get_kind(): Promise<Characteristics_DispenserType>;
}

export class Characteristics_Dispenser_Stub implements Characteristics_Dispenser {
  constructor(private objRef: CORBA.ObjectRef) {}

  async get_kind(): Promise<Characteristics_DispenserType> {
    const request = this.objRef.create_request('_get_kind');
    await request.invoke();
    return request.return_value();
  }

  get kind(): Characteristics_DispenserType {
    throw new Error('Direct property access not supported. Use get_kind() instead.');
  }

}

export interface Characteristics_Feeder extends Characteristics_Bin, Characteristics_Manufacturer {
}

export class Characteristics_Feeder_Stub implements Characteristics_Feeder {
  constructor(private objRef: CORBA.ObjectRef) {}

}

export enum Characteristics_DataType {
  nonApplicableDataType = 0,
  AEA = 1,
  MSG = 2,
  SVG = 3
}

export type Characteristics_DataTypeList = Characteristics_DataType[];

export interface Characteristics_MediaInput extends Characteristics_IOMode, Characteristics_MediaTypeList, Characteristics_ComponentFonts, Characteristics_Location, Characteristics_Manufacturer {
  readonly typeOfReader: Characteristics_ReaderType;
  get_typeOfReader(): Promise<Characteristics_ReaderType>;
  readonly supportedDataTypes: Characteristics_DataTypeList;
  get_supportedDataTypes(): Promise<Characteristics_DataTypeList>;
  readonly setupDataType: Characteristics_DataType;
  get_setupDataType(): Promise<Characteristics_DataType>;
  readonly numberOfTracks: number;
  get_numberOfTracks(): Promise<number>;
}

export class Characteristics_MediaInput_Stub implements Characteristics_MediaInput {
  constructor(private objRef: CORBA.ObjectRef) {}

  async get_typeOfReader(): Promise<Characteristics_ReaderType> {
    const request = this.objRef.create_request('_get_typeOfReader');
    await request.invoke();
    return request.return_value();
  }

  get typeOfReader(): Characteristics_ReaderType {
    throw new Error('Direct property access not supported. Use get_typeOfReader() instead.');
  }

  async get_supportedDataTypes(): Promise<Characteristics_DataTypeList> {
    const request = this.objRef.create_request('_get_supportedDataTypes');
    await request.invoke();
    return request.return_value();
  }

  get supportedDataTypes(): Characteristics_DataTypeList {
    throw new Error('Direct property access not supported. Use get_supportedDataTypes() instead.');
  }

  async get_setupDataType(): Promise<Characteristics_DataType> {
    const request = this.objRef.create_request('_get_setupDataType');
    await request.invoke();
    return request.return_value();
  }

  get setupDataType(): Characteristics_DataType {
    throw new Error('Direct property access not supported. Use get_setupDataType() instead.');
  }

  async get_numberOfTracks(): Promise<number> {
    const request = this.objRef.create_request('_get_numberOfTracks');
    await request.invoke();
    return request.return_value();
  }

  get numberOfTracks(): number {
    throw new Error('Direct property access not supported. Use get_numberOfTracks() instead.');
  }

}

export interface Characteristics_MediaOutput extends Characteristics_IOMode, Characteristics_MediaTypeList, Characteristics_ComponentFonts, Characteristics_Location, Characteristics_Manufacturer {
  readonly type: Characteristics_MediaType;
  get_type(): Promise<Characteristics_MediaType>;
  readonly supportedDataTypes: Characteristics_DataTypeList;
  get_supportedDataTypes(): Promise<Characteristics_DataTypeList>;
  readonly bufferSize: number;
  get_bufferSize(): Promise<number>;
  readonly numberOfTracks: number;
  get_numberOfTracks(): Promise<number>;
  readonly minDocumentLength: number;
  get_minDocumentLength(): Promise<number>;
  readonly maxDocumentLength: number;
  get_maxDocumentLength(): Promise<number>;
  readonly maxPrintSizeX: number;
  get_maxPrintSizeX(): Promise<number>;
  readonly maxPrintSizeY: number;
  get_maxPrintSizeY(): Promise<number>;
  readonly printOrientation: Characteristics_PrintOrientationDef;
  get_printOrientation(): Promise<Characteristics_PrintOrientationDef>;
  setPrintOrientation(appRef: types_reference, orientation: Characteristics_PrintOrientationDef): Promise<returncodes_rc>;
}

export class Characteristics_MediaOutput_Stub implements Characteristics_MediaOutput {
  constructor(private objRef: CORBA.ObjectRef) {}

  async get_type(): Promise<Characteristics_MediaType> {
    const request = this.objRef.create_request('_get_type');
    await request.invoke();
    return request.return_value();
  }

  get type(): Characteristics_MediaType {
    throw new Error('Direct property access not supported. Use get_type() instead.');
  }

  async get_supportedDataTypes(): Promise<Characteristics_DataTypeList> {
    const request = this.objRef.create_request('_get_supportedDataTypes');
    await request.invoke();
    return request.return_value();
  }

  get supportedDataTypes(): Characteristics_DataTypeList {
    throw new Error('Direct property access not supported. Use get_supportedDataTypes() instead.');
  }

  async get_bufferSize(): Promise<number> {
    const request = this.objRef.create_request('_get_bufferSize');
    await request.invoke();
    return request.return_value();
  }

  get bufferSize(): number {
    throw new Error('Direct property access not supported. Use get_bufferSize() instead.');
  }

  async get_numberOfTracks(): Promise<number> {
    const request = this.objRef.create_request('_get_numberOfTracks');
    await request.invoke();
    return request.return_value();
  }

  get numberOfTracks(): number {
    throw new Error('Direct property access not supported. Use get_numberOfTracks() instead.');
  }

  async get_minDocumentLength(): Promise<number> {
    const request = this.objRef.create_request('_get_minDocumentLength');
    await request.invoke();
    return request.return_value();
  }

  get minDocumentLength(): number {
    throw new Error('Direct property access not supported. Use get_minDocumentLength() instead.');
  }

  async get_maxDocumentLength(): Promise<number> {
    const request = this.objRef.create_request('_get_maxDocumentLength');
    await request.invoke();
    return request.return_value();
  }

  get maxDocumentLength(): number {
    throw new Error('Direct property access not supported. Use get_maxDocumentLength() instead.');
  }

  async get_maxPrintSizeX(): Promise<number> {
    const request = this.objRef.create_request('_get_maxPrintSizeX');
    await request.invoke();
    return request.return_value();
  }

  get maxPrintSizeX(): number {
    throw new Error('Direct property access not supported. Use get_maxPrintSizeX() instead.');
  }

  async get_maxPrintSizeY(): Promise<number> {
    const request = this.objRef.create_request('_get_maxPrintSizeY');
    await request.invoke();
    return request.return_value();
  }

  get maxPrintSizeY(): number {
    throw new Error('Direct property access not supported. Use get_maxPrintSizeY() instead.');
  }

  async get_printOrientation(): Promise<Characteristics_PrintOrientationDef> {
    const request = this.objRef.create_request('_get_printOrientation');
    await request.invoke();
    return request.return_value();
  }

  get printOrientation(): Characteristics_PrintOrientationDef {
    throw new Error('Direct property access not supported. Use get_printOrientation() instead.');
  }

  async setPrintOrientation(appRef: types_reference, orientation: Characteristics_PrintOrientationDef): Promise<returncodes_rc> {
    const request = this.objRef.create_request('setPrintOrientation');
    request.add_in_arg('appRef', appRef);
    request.add_in_arg('orientation', orientation);
    await request.invoke();
    return request.return_value();
  }

}

export interface Characteristics_Storage extends Characteristics_Manufacturer {
  readonly size: number;
  get_size(): Promise<number>;
  readonly path: string;
  get_path(): Promise<string>;
}

export class Characteristics_Storage_Stub implements Characteristics_Storage {
  constructor(private objRef: CORBA.ObjectRef) {}

  async get_size(): Promise<number> {
    const request = this.objRef.create_request('_get_size');
    await request.invoke();
    return request.return_value();
  }

  get size(): number {
    throw new Error('Direct property access not supported. Use get_size() instead.');
  }

  async get_path(): Promise<string> {
    const request = this.objRef.create_request('_get_path');
    await request.invoke();
    return request.return_value();
  }

  get path(): string {
    throw new Error('Direct property access not supported. Use get_path() instead.');
  }

}

export interface Characteristics_Display extends Characteristics_Location, Characteristics_Manufacturer {
  readonly displayResolution: Characteristics_ResolutionList;
  get_displayResolution(): Promise<Characteristics_ResolutionList>;
  readonly currentResolution: number;
  get_currentResolution(): Promise<number>;
  setScreenResolution(appRef: types_reference, resolution: number): Promise<returncodes_rc>;
  readonly screenDiagonal: number;
  get_screenDiagonal(): Promise<number>;
}

export class Characteristics_Display_Stub implements Characteristics_Display {
  constructor(private objRef: CORBA.ObjectRef) {}

  async get_displayResolution(): Promise<Characteristics_ResolutionList> {
    const request = this.objRef.create_request('_get_displayResolution');
    await request.invoke();
    return request.return_value();
  }

  get displayResolution(): Characteristics_ResolutionList {
    throw new Error('Direct property access not supported. Use get_displayResolution() instead.');
  }

  async get_currentResolution(): Promise<number> {
    const request = this.objRef.create_request('_get_currentResolution');
    await request.invoke();
    return request.return_value();
  }

  get currentResolution(): number {
    throw new Error('Direct property access not supported. Use get_currentResolution() instead.');
  }

  async setScreenResolution(appRef: types_reference, resolution: number): Promise<returncodes_rc> {
    const request = this.objRef.create_request('setScreenResolution');
    request.add_in_arg('appRef', appRef);
    request.add_in_arg('resolution', resolution);
    await request.invoke();
    return request.return_value();
  }

  async get_screenDiagonal(): Promise<number> {
    const request = this.objRef.create_request('_get_screenDiagonal');
    await request.invoke();
    return request.return_value();
  }

  get screenDiagonal(): number {
    throw new Error('Direct property access not supported. Use get_screenDiagonal() instead.');
  }

}

export interface Characteristics_UserInput extends Characteristics_Location, Characteristics_Manufacturer {
}

export class Characteristics_UserInput_Stub implements Characteristics_UserInput {
  constructor(private objRef: CORBA.ObjectRef) {}

}

export interface Characteristics_UserOutput extends Characteristics_Location, Characteristics_Manufacturer {
}

export class Characteristics_UserOutput_Stub implements Characteristics_UserOutput {
  constructor(private objRef: CORBA.ObjectRef) {}

}

export interface Characteristics_Network extends Characteristics_Manufacturer {
}

export class Characteristics_Network_Stub implements Characteristics_Network {
  constructor(private objRef: CORBA.ObjectRef) {}

}

export interface Characteristics_Application extends Characteristics_Manufacturer {
  readonly identification: types_akID;
  get_identification(): Promise<types_akID>;
  readonly allContacts: Characteristics_ContactList;
  get_allContacts(): Promise<Characteristics_ContactList>;
  readonly firstIPPort: number;
  get_firstIPPort(): Promise<number>;
  readonly lastIPPort: number;
  get_lastIPPort(): Promise<number>;
}

export class Characteristics_Application_Stub implements Characteristics_Application {
  constructor(private objRef: CORBA.ObjectRef) {}

  async get_identification(): Promise<types_akID> {
    const request = this.objRef.create_request('_get_identification');
    await request.invoke();
    return request.return_value();
  }

  get identification(): types_akID {
    throw new Error('Direct property access not supported. Use get_identification() instead.');
  }

  async get_allContacts(): Promise<Characteristics_ContactList> {
    const request = this.objRef.create_request('_get_allContacts');
    await request.invoke();
    return request.return_value();
  }

  get allContacts(): Characteristics_ContactList {
    throw new Error('Direct property access not supported. Use get_allContacts() instead.');
  }

  async get_firstIPPort(): Promise<number> {
    const request = this.objRef.create_request('_get_firstIPPort');
    await request.invoke();
    return request.return_value();
  }

  get firstIPPort(): number {
    throw new Error('Direct property access not supported. Use get_firstIPPort() instead.');
  }

  async get_lastIPPort(): Promise<number> {
    const request = this.objRef.create_request('_get_lastIPPort');
    await request.invoke();
    return request.return_value();
  }

  get lastIPPort(): number {
    throw new Error('Direct property access not supported. Use get_lastIPPort() instead.');
  }

}

export interface Characteristics_BaggageScale extends CORBA.Object {
  readonly maxWeight: number;
  get_maxWeight(): Promise<number>;
}

export class Characteristics_BaggageScale_Stub implements Characteristics_BaggageScale {
  constructor(private objRef: CORBA.ObjectRef) {}

  async get_maxWeight(): Promise<number> {
    const request = this.objRef.create_request('_get_maxWeight');
    await request.invoke();
    return request.return_value();
  }

  get maxWeight(): number {
    throw new Error('Direct property access not supported. Use get_maxWeight() instead.');
  }

}

export interface Characteristics_ConveyorSBD extends Characteristics_Location, Characteristics_Manufacturer {
  readonly maxWeight: number;
  get_maxWeight(): Promise<number>;
  readonly maxWidth: number;
  get_maxWidth(): Promise<number>;
  readonly maxHeight: number;
  get_maxHeight(): Promise<number>;
  readonly maxLength: number;
  get_maxLength(): Promise<number>;
  readonly maxBags: number;
  get_maxBags(): Promise<number>;
  readonly barrierCapable: boolean;
  get_barrierCapable(): Promise<boolean>;
  readonly userInterferenceCapable: boolean;
  get_userInterferenceCapable(): Promise<boolean>;
  readonly safetyIntrusionCapable: boolean;
  get_safetyIntrusionCapable(): Promise<boolean>;
  readonly onewayForward: boolean;
  get_onewayForward(): Promise<boolean>;
}

export class Characteristics_ConveyorSBD_Stub implements Characteristics_ConveyorSBD {
  constructor(private objRef: CORBA.ObjectRef) {}

  async get_maxWeight(): Promise<number> {
    const request = this.objRef.create_request('_get_maxWeight');
    await request.invoke();
    return request.return_value();
  }

  get maxWeight(): number {
    throw new Error('Direct property access not supported. Use get_maxWeight() instead.');
  }

  async get_maxWidth(): Promise<number> {
    const request = this.objRef.create_request('_get_maxWidth');
    await request.invoke();
    return request.return_value();
  }

  get maxWidth(): number {
    throw new Error('Direct property access not supported. Use get_maxWidth() instead.');
  }

  async get_maxHeight(): Promise<number> {
    const request = this.objRef.create_request('_get_maxHeight');
    await request.invoke();
    return request.return_value();
  }

  get maxHeight(): number {
    throw new Error('Direct property access not supported. Use get_maxHeight() instead.');
  }

  async get_maxLength(): Promise<number> {
    const request = this.objRef.create_request('_get_maxLength');
    await request.invoke();
    return request.return_value();
  }

  get maxLength(): number {
    throw new Error('Direct property access not supported. Use get_maxLength() instead.');
  }

  async get_maxBags(): Promise<number> {
    const request = this.objRef.create_request('_get_maxBags');
    await request.invoke();
    return request.return_value();
  }

  get maxBags(): number {
    throw new Error('Direct property access not supported. Use get_maxBags() instead.');
  }

  async get_barrierCapable(): Promise<boolean> {
    const request = this.objRef.create_request('_get_barrierCapable');
    await request.invoke();
    return request.return_value();
  }

  get barrierCapable(): boolean {
    throw new Error('Direct property access not supported. Use get_barrierCapable() instead.');
  }

  async get_userInterferenceCapable(): Promise<boolean> {
    const request = this.objRef.create_request('_get_userInterferenceCapable');
    await request.invoke();
    return request.return_value();
  }

  get userInterferenceCapable(): boolean {
    throw new Error('Direct property access not supported. Use get_userInterferenceCapable() instead.');
  }

  async get_safetyIntrusionCapable(): Promise<boolean> {
    const request = this.objRef.create_request('_get_safetyIntrusionCapable');
    await request.invoke();
    return request.return_value();
  }

  get safetyIntrusionCapable(): boolean {
    throw new Error('Direct property access not supported. Use get_safetyIntrusionCapable() instead.');
  }

  async get_onewayForward(): Promise<boolean> {
    const request = this.objRef.create_request('_get_onewayForward');
    await request.invoke();
    return request.return_value();
  }

  get onewayForward(): boolean {
    throw new Error('Direct property access not supported. Use get_onewayForward() instead.');
  }

}

export interface Characteristics_Conveyor extends Characteristics_Location, Characteristics_Manufacturer {
  readonly maxWeight: number;
  get_maxWeight(): Promise<number>;
  readonly typeOfConveyor: Characteristics_ConveyorType;
  get_typeOfConveyor(): Promise<Characteristics_ConveyorType>;
  readonly maxWidth: number;
  get_maxWidth(): Promise<number>;
  readonly maxHeigth: number;
  get_maxHeigth(): Promise<number>;
  readonly maxLength: number;
  get_maxLength(): Promise<number>;
  readonly guarenteedNoOfBags: number;
  get_guarenteedNoOfBags(): Promise<number>;
  readonly currentNoOfBagsParked: number;
  get_currentNoOfBagsParked(): Promise<number>;
}

export class Characteristics_Conveyor_Stub implements Characteristics_Conveyor {
  constructor(private objRef: CORBA.ObjectRef) {}

  async get_maxWeight(): Promise<number> {
    const request = this.objRef.create_request('_get_maxWeight');
    await request.invoke();
    return request.return_value();
  }

  get maxWeight(): number {
    throw new Error('Direct property access not supported. Use get_maxWeight() instead.');
  }

  async get_typeOfConveyor(): Promise<Characteristics_ConveyorType> {
    const request = this.objRef.create_request('_get_typeOfConveyor');
    await request.invoke();
    return request.return_value();
  }

  get typeOfConveyor(): Characteristics_ConveyorType {
    throw new Error('Direct property access not supported. Use get_typeOfConveyor() instead.');
  }

  async get_maxWidth(): Promise<number> {
    const request = this.objRef.create_request('_get_maxWidth');
    await request.invoke();
    return request.return_value();
  }

  get maxWidth(): number {
    throw new Error('Direct property access not supported. Use get_maxWidth() instead.');
  }

  async get_maxHeigth(): Promise<number> {
    const request = this.objRef.create_request('_get_maxHeigth');
    await request.invoke();
    return request.return_value();
  }

  get maxHeigth(): number {
    throw new Error('Direct property access not supported. Use get_maxHeigth() instead.');
  }

  async get_maxLength(): Promise<number> {
    const request = this.objRef.create_request('_get_maxLength');
    await request.invoke();
    return request.return_value();
  }

  get maxLength(): number {
    throw new Error('Direct property access not supported. Use get_maxLength() instead.');
  }

  async get_guarenteedNoOfBags(): Promise<number> {
    const request = this.objRef.create_request('_get_guarenteedNoOfBags');
    await request.invoke();
    return request.return_value();
  }

  get guarenteedNoOfBags(): number {
    throw new Error('Direct property access not supported. Use get_guarenteedNoOfBags() instead.');
  }

  async get_currentNoOfBagsParked(): Promise<number> {
    const request = this.objRef.create_request('_get_currentNoOfBagsParked');
    await request.invoke();
    return request.return_value();
  }

  get currentNoOfBagsParked(): number {
    throw new Error('Direct property access not supported. Use get_currentNoOfBagsParked() instead.');
  }

}

export interface Characteristics_Announcement extends Characteristics_Manufacturer {
  readonly supportedLanguages: Characteristics_LanguageList;
  get_supportedLanguages(): Promise<Characteristics_LanguageList>;
}

export class Characteristics_Announcement_Stub implements Characteristics_Announcement {
  constructor(private objRef: CORBA.ObjectRef) {}

  async get_supportedLanguages(): Promise<Characteristics_LanguageList> {
    const request = this.objRef.create_request('_get_supportedLanguages');
    await request.invoke();
    return request.return_value();
  }

  get supportedLanguages(): Characteristics_LanguageList {
    throw new Error('Direct property access not supported. Use get_supportedLanguages() instead.');
  }

}

// Module: Components

export interface Components_Component extends CORBA.Object {
}

export class Components_Component_Stub implements Components_Component {
  constructor(private objRef: CORBA.ObjectRef) {}

}

export interface Components_CUSSCntl extends Components_Component {
  query(to: types_timeout, appRef: types_reference, e?: types_Event): Promise<returncodes_rc>;
}

export class Components_CUSSCntl_Stub implements Components_CUSSCntl {
  constructor(private objRef: CORBA.ObjectRef) {}

  async query(to: types_timeout, appRef: types_reference, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('query');
    request.add_in_arg('to', to);
    request.add_in_arg('appRef', appRef);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

}

export interface Components_Peripheral extends Components_CUSSCntl {
  acquire(to: types_timeout, appRef: types_reference, ef: types_evtAcquireFilter, el: types_evtListener, elud: types_correlation, e?: types_Event): Promise<returncodes_rc>;
  release(to: types_timeout, appRef: types_reference, e?: types_Event): Promise<returncodes_rc>;
  setup(to: types_timeout, appRef: types_reference, ds: types_datastream, e?: types_Event): Promise<returncodes_rc>;
  cancel(appRef: types_reference, e?: types_Event): Promise<returncodes_rc>;
  test(to: types_timeout, appRef: types_reference, e?: types_Event): Promise<returncodes_rc>;
}

export class Components_Peripheral_Stub implements Components_Peripheral {
  constructor(private objRef: CORBA.ObjectRef) {}

  async acquire(to: types_timeout, appRef: types_reference, ef: types_evtAcquireFilter, el: types_evtListener, elud: types_correlation, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('acquire');
    request.add_in_arg('to', to);
    request.add_in_arg('appRef', appRef);
    request.add_in_arg('ef', ef);
    request.add_in_arg('el', el);
    request.add_in_arg('elud', elud);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

  async release(to: types_timeout, appRef: types_reference, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('release');
    request.add_in_arg('to', to);
    request.add_in_arg('appRef', appRef);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

  async setup(to: types_timeout, appRef: types_reference, ds: types_datastream, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('setup');
    request.add_in_arg('to', to);
    request.add_in_arg('appRef', appRef);
    request.add_in_arg('ds', ds);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

  async cancel(appRef: types_reference, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('cancel');
    request.add_in_arg('appRef', appRef);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

  async test(to: types_timeout, appRef: types_reference, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('test');
    request.add_in_arg('to', to);
    request.add_in_arg('appRef', appRef);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

}

export interface Components_Input extends CORBA.Object {
  receive(to: types_timeout, appRef: types_reference, e?: types_Event): Promise<returncodes_rc>;
}

export class Components_Input_Stub implements Components_Input {
  constructor(private objRef: CORBA.ObjectRef) {}

  async receive(to: types_timeout, appRef: types_reference, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('receive');
    request.add_in_arg('to', to);
    request.add_in_arg('appRef', appRef);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

}

export interface Components_Output extends CORBA.Object {
  send(to: types_timeout, appRef: types_reference, ds: types_datastream, e?: types_Event): Promise<returncodes_rc>;
}

export class Components_Output_Stub implements Components_Output {
  constructor(private objRef: CORBA.ObjectRef) {}

  async send(to: types_timeout, appRef: types_reference, ds: types_datastream, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('send');
    request.add_in_arg('to', to);
    request.add_in_arg('appRef', appRef);
    request.add_in_arg('ds', ds);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

}

export interface Components_User extends CORBA.Object {
  enable(to: types_timeout, appRef: types_reference, e?: types_Event): Promise<returncodes_rc>;
  disable(to: types_timeout, appRef: types_reference, e?: types_Event): Promise<returncodes_rc>;
}

export class Components_User_Stub implements Components_User {
  constructor(private objRef: CORBA.ObjectRef) {}

  async enable(to: types_timeout, appRef: types_reference, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('enable');
    request.add_in_arg('to', to);
    request.add_in_arg('appRef', appRef);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

  async disable(to: types_timeout, appRef: types_reference, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('disable');
    request.add_in_arg('to', to);
    request.add_in_arg('appRef', appRef);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

}

export interface Components_Userless extends CORBA.Object {
}

export class Components_Userless_Stub implements Components_Userless {
  constructor(private objRef: CORBA.ObjectRef) {}

}

export interface Components_Media extends CORBA.Object {
}

export class Components_Media_Stub implements Components_Media {
  constructor(private objRef: CORBA.ObjectRef) {}

}

export interface Components_Medialess extends CORBA.Object {
}

export class Components_Medialess_Stub implements Components_Medialess {
  constructor(private objRef: CORBA.ObjectRef) {}

}

export interface Components_Data extends CORBA.Object {
}

export class Components_Data_Stub implements Components_Data {
  constructor(private objRef: CORBA.ObjectRef) {}

}

export interface Components_Dataless extends CORBA.Object {
}

export class Components_Dataless_Stub implements Components_Dataless {
  constructor(private objRef: CORBA.ObjectRef) {}

}

export interface Components_Capture extends Components_Peripheral, Components_Userless, Components_Media, Components_Dataless, Characteristics_Capture {
  retain(to: types_timeout, appRef: types_reference, e?: types_Event): Promise<returncodes_rc>;
}

export class Components_Capture_Stub implements Components_Capture {
  constructor(private objRef: CORBA.ObjectRef) {}

  async retain(to: types_timeout, appRef: types_reference, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('retain');
    request.add_in_arg('to', to);
    request.add_in_arg('appRef', appRef);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

}

export interface Components_Dispenser extends Components_Peripheral, Components_User, Components_Media, Components_Dataless, Characteristics_Dispenser {
  offer(to: types_timeout, appRef: types_reference, e?: types_Event): Promise<returncodes_rc>;
}

export class Components_Dispenser_Stub implements Components_Dispenser {
  constructor(private objRef: CORBA.ObjectRef) {}

  async offer(to: types_timeout, appRef: types_reference, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('offer');
    request.add_in_arg('to', to);
    request.add_in_arg('appRef', appRef);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

}

export interface Components_Feeder extends Components_Peripheral, Components_Userless, Components_Media, Components_Dataless, Characteristics_Feeder {
  offer(to: types_timeout, appRef: types_reference, e?: types_Event): Promise<returncodes_rc>;
}

export class Components_Feeder_Stub implements Components_Feeder {
  constructor(private objRef: CORBA.ObjectRef) {}

  async offer(to: types_timeout, appRef: types_reference, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('offer');
    request.add_in_arg('to', to);
    request.add_in_arg('appRef', appRef);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

}

export interface Components_DataInput extends Components_Peripheral, Components_Userless, Components_Medialess, Components_Data, Components_Input, Characteristics_DataInput {
}

export class Components_DataInput_Stub implements Components_DataInput {
  constructor(private objRef: CORBA.ObjectRef) {}

}

export interface Components_DataOutput extends Components_Peripheral, Components_Userless, Components_Medialess, Components_Data, Components_Output, Characteristics_DataOutput {
}

export class Components_DataOutput_Stub implements Components_DataOutput {
  constructor(private objRef: CORBA.ObjectRef) {}

}

export interface Components_UserInput extends Components_Peripheral, Components_User, Components_Medialess, Components_Data, Components_Input, Characteristics_UserInput {
}

export class Components_UserInput_Stub implements Components_UserInput {
  constructor(private objRef: CORBA.ObjectRef) {}

}

export interface Components_UserOutput extends Components_Peripheral, Components_User, Components_Medialess, Components_Data, Components_Output, Characteristics_UserOutput {
}

export class Components_UserOutput_Stub implements Components_UserOutput {
  constructor(private objRef: CORBA.ObjectRef) {}

}

export interface Components_MediaInput extends Components_Peripheral, Components_User, Components_Media, Components_Data, Components_Input, Characteristics_MediaInput {
}

export class Components_MediaInput_Stub implements Components_MediaInput {
  constructor(private objRef: CORBA.ObjectRef) {}

}

export interface Components_MediaOutput extends Components_Peripheral, Components_User, Components_Media, Components_Data, Components_Output, Characteristics_MediaOutput {
}

export class Components_MediaOutput_Stub implements Components_MediaOutput {
  constructor(private objRef: CORBA.ObjectRef) {}

}

export interface Components_Storage extends Components_Peripheral, Components_Userless, Components_Media, Characteristics_Storage {
}

export class Components_Storage_Stub implements Components_Storage {
  constructor(private objRef: CORBA.ObjectRef) {}

}

export interface Components_Display extends Components_Peripheral, Components_User, Components_Medialess, Characteristics_Display {
}

export class Components_Display_Stub implements Components_Display {
  constructor(private objRef: CORBA.ObjectRef) {}

}

export interface Components_Network extends Components_Peripheral, Components_Userless, Components_Medialess, Characteristics_Network {
}

export class Components_Network_Stub implements Components_Network {
  constructor(private objRef: CORBA.ObjectRef) {}

}

export interface Components_BaggageScale extends Components_UserInput, Characteristics_BaggageScale {
}

export class Components_BaggageScale_Stub implements Components_BaggageScale {
  constructor(private objRef: CORBA.ObjectRef) {}

}

export interface Components_ConveyorSBD extends Components_Peripheral, Components_Medialess, Components_Output, Components_Input, Characteristics_ConveyorSBD {
  forward(to: types_timeout, appRef: types_reference, e?: types_Event): Promise<returncodes_rc>;
  backward(to: types_timeout, appRef: types_reference, e?: types_Event): Promise<returncodes_rc>;
  process(to: types_timeout, appRef: types_reference, e?: types_Event): Promise<returncodes_rc>;
}

export class Components_ConveyorSBD_Stub implements Components_ConveyorSBD {
  constructor(private objRef: CORBA.ObjectRef) {}

  async forward(to: types_timeout, appRef: types_reference, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('forward');
    request.add_in_arg('to', to);
    request.add_in_arg('appRef', appRef);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

  async backward(to: types_timeout, appRef: types_reference, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('backward');
    request.add_in_arg('to', to);
    request.add_in_arg('appRef', appRef);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

  async process(to: types_timeout, appRef: types_reference, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('process');
    request.add_in_arg('to', to);
    request.add_in_arg('appRef', appRef);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

}

export interface Components_InsertionBelt extends Components_ConveyorSBD, Components_User {
  offer(to: types_timeout, appRef: types_reference, e?: types_Event): Promise<returncodes_rc>;
}

export class Components_InsertionBelt_Stub implements Components_InsertionBelt {
  constructor(private objRef: CORBA.ObjectRef) {}

  async offer(to: types_timeout, appRef: types_reference, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('offer');
    request.add_in_arg('to', to);
    request.add_in_arg('appRef', appRef);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

}

export interface Components_VerificationBelt extends Components_ConveyorSBD, Components_Userless {
}

export class Components_VerificationBelt_Stub implements Components_VerificationBelt {
  constructor(private objRef: CORBA.ObjectRef) {}

}

export interface Components_ParkingBelt extends Components_ConveyorSBD, Components_Userless {
}

export class Components_ParkingBelt_Stub implements Components_ParkingBelt {
  constructor(private objRef: CORBA.ObjectRef) {}

}

export interface Components_Conveyor extends Components_Peripheral, Components_User, Components_Medialess, Components_Data, Components_Input, Characteristics_Conveyor {
  accept(to: types_timeout, appRef: types_reference, e?: types_Event): Promise<returncodes_rc>;
  reject(to: types_timeout, appRef: types_reference, e?: types_Event): Promise<returncodes_rc>;
  forwardParked(to: types_timeout, appRef: types_reference, e?: types_Event): Promise<returncodes_rc>;
  returnParked(to: types_timeout, appRef: types_reference, e?: types_Event): Promise<returncodes_rc>;
  waitForRemovedBaggage(to: types_timeout, appRef: types_reference, e?: types_Event): Promise<returncodes_rc>;
}

export class Components_Conveyor_Stub implements Components_Conveyor {
  constructor(private objRef: CORBA.ObjectRef) {}

  async accept(to: types_timeout, appRef: types_reference, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('accept');
    request.add_in_arg('to', to);
    request.add_in_arg('appRef', appRef);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

  async reject(to: types_timeout, appRef: types_reference, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('reject');
    request.add_in_arg('to', to);
    request.add_in_arg('appRef', appRef);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

  async forwardParked(to: types_timeout, appRef: types_reference, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('forwardParked');
    request.add_in_arg('to', to);
    request.add_in_arg('appRef', appRef);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

  async returnParked(to: types_timeout, appRef: types_reference, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('returnParked');
    request.add_in_arg('to', to);
    request.add_in_arg('appRef', appRef);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

  async waitForRemovedBaggage(to: types_timeout, appRef: types_reference, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('waitForRemovedBaggage');
    request.add_in_arg('to', to);
    request.add_in_arg('appRef', appRef);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

}

export interface Components_Announcement extends Components_Peripheral, Components_User, Components_Medialess, Characteristics_Announcement {
  play(appRef: types_reference, blocking: boolean, ssml: types_bytestream, e?: types_Event): Promise<returncodes_rc>;
  stop(appRef: types_reference, e?: types_Event): Promise<returncodes_rc>;
  pause(appRef: types_reference, e?: types_Event): Promise<returncodes_rc>;
  resume(appRef: types_reference, e?: types_Event): Promise<returncodes_rc>;
}

export class Components_Announcement_Stub implements Components_Announcement {
  constructor(private objRef: CORBA.ObjectRef) {}

  async play(appRef: types_reference, blocking: boolean, ssml: types_bytestream, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('play');
    request.add_in_arg('appRef', appRef);
    request.add_in_arg('blocking', blocking);
    request.add_in_arg('ssml', ssml);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

  async stop(appRef: types_reference, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('stop');
    request.add_in_arg('appRef', appRef);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

  async pause(appRef: types_reference, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('pause');
    request.add_in_arg('appRef', appRef);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

  async resume(appRef: types_reference, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('resume');
    request.add_in_arg('appRef', appRef);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

}

export interface Components_Application extends Components_CUSSCntl, Characteristics_Application {
}

export class Components_Application_Stub implements Components_Application {
  constructor(private objRef: CORBA.ObjectRef) {}

}

export interface Components_ManagementInterface extends Components_Component {
  level(appid: types_akID, el?: types_EnvironmentLevel): Promise<returncodes_rc>;
  components(appRef: types_reference, ec?: types_EnvironmentComponents): Promise<returncodes_rc>;
  waitEvent(to: types_timeout, appRef: types_reference, ef: types_evtFilter, e?: types_Event): Promise<returncodes_rc>;
  generateEvent(appRef: types_reference, ie: types_Event, oe?: types_Event): Promise<returncodes_rc>;
  queryEvent(appRef: types_reference, ef: types_evtFilter, ed?: types_evtDescription): Promise<returncodes_rc>;
  registerEvent(appRef: types_reference, act: types_action, ef: types_evtFilter, el: types_evtListener, elud: types_correlation, e?: types_Event): Promise<returncodes_rc>;
}

export class Components_ManagementInterface_Stub implements Components_ManagementInterface {
  constructor(private objRef: CORBA.ObjectRef) {}

  async level(appid: types_akID, el: types_EnvironmentLevel): Promise<returncodes_rc> {
    const request = this.objRef.create_request('level');
    request.add_in_arg('appid', appid);
    request.add_out_arg('el');
    await request.invoke();
    return request.return_value();
  }

  async components(appRef: types_reference, ec: types_EnvironmentComponents): Promise<returncodes_rc> {
    const request = this.objRef.create_request('components');
    request.add_in_arg('appRef', appRef);
    request.add_out_arg('ec');
    await request.invoke();
    return request.return_value();
  }

  async waitEvent(to: types_timeout, appRef: types_reference, ef: types_evtFilter, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('waitEvent');
    request.add_in_arg('to', to);
    request.add_in_arg('appRef', appRef);
    request.add_in_arg('ef', ef);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

  async generateEvent(appRef: types_reference, ie: types_Event, oe: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('generateEvent');
    request.add_in_arg('appRef', appRef);
    request.add_in_arg('ie', ie);
    request.add_out_arg('oe');
    await request.invoke();
    return request.return_value();
  }

  async queryEvent(appRef: types_reference, ef: types_evtFilter, ed: types_evtDescription): Promise<returncodes_rc> {
    const request = this.objRef.create_request('queryEvent');
    request.add_in_arg('appRef', appRef);
    request.add_in_arg('ef', ef);
    request.add_out_arg('ed');
    await request.invoke();
    return request.return_value();
  }

  async registerEvent(appRef: types_reference, act: types_action, ef: types_evtFilter, el: types_evtListener, elud: types_correlation, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('registerEvent');
    request.add_in_arg('appRef', appRef);
    request.add_in_arg('act', act);
    request.add_in_arg('ef', ef);
    request.add_in_arg('el', el);
    request.add_in_arg('elud', elud);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

}

export interface Components_ApplicationManager extends Components_ManagementInterface {
  initrequest(appRef: types_reference, e?: types_Event): Promise<returncodes_rc>;
  notify(appRef: types_reference, id: types_akID, ec: types_evtCode, e?: types_Event): Promise<returncodes_rc>;
}

export class Components_ApplicationManager_Stub implements Components_ApplicationManager {
  constructor(private objRef: CORBA.ObjectRef) {}

  async initrequest(appRef: types_reference, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('initrequest');
    request.add_in_arg('appRef', appRef);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

  async notify(appRef: types_reference, id: types_akID, ec: types_evtCode, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('notify');
    request.add_in_arg('appRef', appRef);
    request.add_in_arg('id', id);
    request.add_in_arg('ec', ec);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

}

export interface Components_ServiceProviderInterface extends Components_ManagementInterface {
  load(to: types_timeout, appRef: types_reference, whichApp: types_akID, e?: types_Event): Promise<returncodes_rc>;
  suspend(appRef: types_reference, whichApp: types_akID, e?: types_Event): Promise<returncodes_rc>;
  suspendAll(appRef: types_reference, e?: types_Event): Promise<returncodes_rc>;
  resume(appRef: types_reference, whichApp: types_akID, e?: types_Event): Promise<returncodes_rc>;
  resumeAll(appRef: types_reference, e?: types_Event): Promise<returncodes_rc>;
  stop(appRef: types_reference, whichApp: types_akID, e?: types_Event): Promise<returncodes_rc>;
  stopAll(appRef: types_reference, e?: types_Event): Promise<returncodes_rc>;
}

export class Components_ServiceProviderInterface_Stub implements Components_ServiceProviderInterface {
  constructor(private objRef: CORBA.ObjectRef) {}

  async load(to: types_timeout, appRef: types_reference, whichApp: types_akID, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('load');
    request.add_in_arg('to', to);
    request.add_in_arg('appRef', appRef);
    request.add_in_arg('whichApp', whichApp);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

  async suspend(appRef: types_reference, whichApp: types_akID, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('suspend');
    request.add_in_arg('appRef', appRef);
    request.add_in_arg('whichApp', whichApp);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

  async suspendAll(appRef: types_reference, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('suspendAll');
    request.add_in_arg('appRef', appRef);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

  async resume(appRef: types_reference, whichApp: types_akID, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('resume');
    request.add_in_arg('appRef', appRef);
    request.add_in_arg('whichApp', whichApp);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

  async resumeAll(appRef: types_reference, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('resumeAll');
    request.add_in_arg('appRef', appRef);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

  async stop(appRef: types_reference, whichApp: types_akID, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('stop');
    request.add_in_arg('appRef', appRef);
    request.add_in_arg('whichApp', whichApp);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

  async stopAll(appRef: types_reference, e: types_Event): Promise<returncodes_rc> {
    const request = this.objRef.create_request('stopAll');
    request.add_in_arg('appRef', appRef);
    request.add_out_arg('e');
    await request.invoke();
    return request.return_value();
  }

}
