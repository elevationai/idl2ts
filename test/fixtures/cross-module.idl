// Cross-module reference testing

module Common {
  typedef long ID;
  typedef string UUID;
  
  struct Timestamp {
    long long seconds;
    long nanos;
  };
  
  struct Metadata {
    UUID id;
    Timestamp created;
    Timestamp modified;
    string createdBy;
    string modifiedBy;
  };
  
  exception ValidationError {
    string field;
    string message;
  };
}

module Auth {
  struct User {
    ::Common::UUID userId;
    string username;
    string email;
    ::Common::Timestamp lastLogin;
  };
  
  struct Token {
    string value;
    ::Common::Timestamp expiresAt;
    User user;
  };
  
  exception AuthenticationError {
    string reason;
    ::Common::Timestamp timestamp;
  };
  
  interface AuthService {
    Token login(in string username, in string password)
      raises (AuthenticationError);
    
    boolean validateToken(in Token token)
      raises (AuthenticationError);
    
    void logout(in Token token);
    
    User getUserInfo(in ::Common::UUID userId)
      raises (::Common::ValidationError);
  };
}

module Business {
  struct Document {
    ::Common::Metadata metadata;
    string title;
    string content;
    ::Auth::User author;
    sequence<::Common::UUID> tags;
  };
  
  interface DocumentService {
    Document createDocument(
      in string title,
      in string content,
      in ::Auth::Token authToken
    ) raises (::Auth::AuthenticationError, ::Common::ValidationError);
    
    Document getDocument(in ::Common::UUID documentId)
      raises (::Common::ValidationError);
    
    sequence<Document> searchDocuments(
      in string query,
      in ::Auth::Token authToken
    ) raises (::Auth::AuthenticationError);
    
    void updateDocument(
      in ::Common::UUID documentId,
      in Document document,
      in ::Auth::Token authToken
    ) raises (::Auth::AuthenticationError, ::Common::ValidationError);
    
    void deleteDocument(
      in ::Common::UUID documentId,
      in ::Auth::Token authToken
    ) raises (::Auth::AuthenticationError, ::Common::ValidationError);
  };
}

// Test inheritance across modules
module Extensions {
  interface ExtendedAuthService : ::Auth::AuthService {
    void changePassword(
      in ::Auth::Token token,
      in string oldPassword,
      in string newPassword
    ) raises (::Auth::AuthenticationError, ::Common::ValidationError);
    
    sequence<::Auth::User> listUsers(in ::Auth::Token adminToken)
      raises (::Auth::AuthenticationError);
  };
  
  interface ExtendedDocumentService : ::Business::DocumentService {
    void shareDocument(
      in ::Common::UUID documentId,
      in ::Common::UUID userId,
      in ::Auth::Token authToken
    ) raises (::Auth::AuthenticationError, ::Common::ValidationError);
    
    sequence<::Business::Document> getSharedDocuments(
      in ::Auth::Token authToken
    ) raises (::Auth::AuthenticationError);
  };
}