module Banking {
    interface Account {
        readonly attribute string accountNumber;
        readonly attribute double balance;
        
        void deposit(in double amount) raises (InvalidAmount);
        void withdraw(in double amount) raises (InvalidAmount, InsufficientFunds);
        boolean transfer(in double amount, in Account targetAccount) 
            raises (InvalidAmount, InsufficientFunds, InvalidAccount);
        
        TransactionHistory getTransactionHistory(in long startDate, in long endDate);
    };
    
    interface Bank {
        Account createAccount(in string customerName, in AccountType type);
        Account findAccount(in string accountNumber) raises (AccountNotFound);
        sequence<Account> listAccounts(in string customerName);
        void closeAccount(in string accountNumber) raises (AccountNotFound);
    };
    
    struct Transaction {
        string transactionId;
        long timestamp;
        TransactionType type;
        double amount;
        string description;
    };
    
    typedef sequence<Transaction> TransactionHistory;
    
    enum AccountType {
        CHECKING,
        SAVINGS,
        BUSINESS
    };
    
    enum TransactionType {
        DEPOSIT,
        WITHDRAWAL,
        TRANSFER_IN,
        TRANSFER_OUT,
        FEE
    };
    
    exception InvalidAmount {
        double amount;
        string reason;
    };
    
    exception InsufficientFunds {
        double requested;
        double available;
    };
    
    exception AccountNotFound {
        string accountNumber;
    };
    
    exception InvalidAccount {
        string accountNumber;
        string reason;
    };
    
    const double MINIMUM_BALANCE = 100.0;
    const double OVERDRAFT_FEE = 35.0;
};