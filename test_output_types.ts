/**
 * This file was automatically generated by idl2ts
 * DO NOT EDIT THIS FILE DIRECTLY
 * 
 * Source: types.idl
 * Generated on: 2025-08-24T23:09:08.805Z
 * idl2ts version: 1.0.0
 */

import { CORBA } from 'corba.ts';

// Module: types

export type types_name = string;

export type types_namelist = types_name[];

export type types_indexList = number[];

export type types_reference = string;

export type types_ior = string;

export type types_iorlist = types_ior[];

export type types_bytestream = number[];

export type types_correlation = any;

export type types_timeout = number;

export const types_BLOCK_: types_timeout = 0;

export interface types_akID {
  companyCode: types_name;
  applicationName: types_name;
  vendorCode: types_name;
  kioskName: types_name;
}

export interface types_location {
  airportCode: types_name;
  terminal: types_name;
  area: types_name;
  address: types_name;
}

export enum types_orientation {
  north_ = 0,
  south_ = 1,
  east_ = 2,
  west_ = 3,
  undefined_ = 4
}

export interface types_coordinate {
  direction: types_orientation;
  degrees: number;
  minutes: number;
  seconds: number;
  hundreths: number;
}

export interface types_gps {
  longitude: types_coordinate;
  latitude: types_coordinate;
  altitude: number;
}

export interface types_EnvironmentLevel {
  sessionTimeout: types_timeout;
  killTimeout: types_timeout;
  kioskID: types_akID;
  kioskLocation: types_location;
  gpsLocation: types_gps;
  cussVersion: types_name;
  cussInterfaceVersionMin: types_name;
  cussInterfaceVersionMax: types_name;
  jvmName: types_name;
  jvmVersion: types_name;
  browserName: types_name;
  browserVersion: types_name;
  osName: types_name;
  osVersion: types_name;
  applicationToken: types_reference;
}

export interface types_EnvironmentComponent {
  virtualComponentName: types_name;
  virtualComponentRef: types_ior;
  realComponentName: types_name;
  linkedComponents: types_indexList;
}

export type types_EnvironmentComponents = types_EnvironmentComponent[];

export type types_dataStatus = number;

export interface types_dataRecord {
  status: types_dataStatus;
  message: types_bytestream;
}

export interface types_msgDataType {
  records: types_dataRecord[];
}

export type types_aeaDataType = types_bytestream;

export type types_svgDataType = types_bytestream;

export type types_nilDataType = number;

export enum types_action {
  subscribe_ = 0,
  discard_ = 1
}

export enum types_evtCategory {
  alarm_ = 0,
  alert_ = 1,
  normal_ = 2
}

export enum types_evtType {
  invalid_ = 0,
  private_ = 1,
  public_ = 2,
  platform_ = 3
}

export enum types_evtMode {
  solicited_ = 0,
  unsolicited_ = 1
}

export enum types_evtFilterType {
  all_ = 0,
  any_ = 1,
  nil_ = 2,
  code_ = 3,
  type_ = 4,
  component_ = 5
}

export type types_evtCode = number;

export type types_evtStatusCode = number;

export type types_datastream = any;

export type types_evtCodeFilterUnion = 
  { discriminator: "all_" | "any_"; filterALLorANY: any; } |
  { discriminator: "component_"; filterCOMPONENT: types_iorlist; }
;

export interface types_evtCodeFilterElem {
  eventCode: types_evtCode;
  statusCode: types_evtStatusCode;
  eventFilter: types_evtCodeFilterUnion;
}

export type types_evtCodeFilter = types_evtCodeFilterElem[];

export type types_evtTypeFilterUnion = 
  { discriminator: "all_" | "any_"; filterALLorANY: any; } |
  { discriminator: "component_"; filterCOMPONENT: types_iorlist; }
;

export interface types_evtTypeFilterElem {
  eventType: types_evtType;
  eventFilter: types_evtTypeFilterUnion;
}

export type types_evtTypeFilter = types_evtTypeFilterElem[];

export type types_evtComponentFilterUnion = 
  { discriminator: "all_" | "any_"; filterALLorANY: any; } |
  { discriminator: "code_"; filterCODE: types_evtCode[]; } |
  { discriminator: "type_"; filterTYPE: types_evtType[]; }
;

export interface types_evtComponentFilterElem {
  componentName: types_ior;
  eventFilter: types_evtComponentFilterUnion;
}

export type types_evtComponentFilter = types_evtComponentFilterElem[];

export type types_evtFilter = 
  { discriminator: "all_" | "any_"; filterALLorANY: any; } |
  { discriminator: "code_"; filterCODE: types_evtCodeFilter; } |
  { discriminator: "type_"; filterTYPE: types_evtTypeFilter; } |
  { discriminator: "component_"; filterCOMPONENT: types_evtComponentFilter; }
;

export type types_evtAcquireFilter = 
  { discriminator: "all_" | "nil_"; filterALLorNIL: any; } |
  { discriminator: "code_"; filterCODE: types_evtCode[]; } |
  { discriminator: "type_"; filterTYPE: types_evtType[]; }
;

export interface types_evtDescr {
  eventCode: types_evtCode;
  statusCode: types_evtStatusCode;
  eventTypes: types_evtType[];
  eventDescription: types_name;
}

export interface types_evtDescrANY_CODE_TYPE {
  eventDescr: types_evtDescr;
  componentList: types_namelist;
}

export interface types_evtDescrCOMPONENT {
  componentName: types_name;
  eventDescr: types_evtDescr[];
}

export type types_evtDescription = 
  { discriminator: "any_" | "code_" | "type_"; eventDescrANY_CODE_TYPE: types_evtDescrANY_CODE_TYPE; } |
  { discriminator: "component_"; eventDescrCOMPONENT: types_evtDescrCOMPONENT; }
;

export type types_TimeT = number;

export interface types_Event {
  timeStamp: types_TimeT;
  kioskID: types_akID;
  kioskLocation: types_location;
  gpsLocation: types_gps;
  componentRef: types_name;
  functionName: types_name;
  eventCode: types_evtCode;
  eventMode: types_evtMode;
  eventType: types_evtType;
  eventCategory: types_evtCategory;
  statusCode: types_evtStatusCode;
  elud: types_correlation;
  eventData: types_datastream;
}

export interface types_evtListener extends CORBA.Object {
  callback(e: types_Event): Promise<void>;
}

export class types_evtListenerStub implements types_evtListener {
  constructor(private objRef: CORBA.ObjectRef) {}

  async callback(e: types_Event): Promise<void> {
    const request = this.objRef.create_request('callback');
    request.add_in_arg('e', e);
    await request.invoke();
  }

}
